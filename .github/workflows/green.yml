name: Deployment using Elastic Beanstalk
on:
    workflow_dispatch:
    push:
      branches: [ "green" ]
    pull_request:
      branches: [ "main" ] 

env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
    AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} 
    AWS_DEFAULT_REGION: us-east-1

jobs:
    terraform_infrastructure:

      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: aws-action/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Echo Hello World
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Version
        run: echo "Terraform version=$(terraform --version)"

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        env:
          RDS_CREDENTIALS_SECRET_ARN: ${{ secrets.RDS_CREDENTIALS_SECRET_ARN }}
        run: |
          terraform plan \
            -var="rds_credentials_secret_arn=$RDS_CREDENTIALS_SECRET_ARN"
        working-directory: terraform

      - name: Terraform Apply
        env:
          RDS_CREDENTIALS_SECRET_ARN: ${{ secrets.RDS_CREDENTIALS_SECRET_ARN }}
        run: |
          terraform apply -auto-approve \
            -var="rds_credentials_secret_arn=$RDS_CREDENTIALS_SECRET_ARN"
        working-directory: terraform

      # - name: Terraform Destroy #
      #   env:
      #     RDS_CREDENTIALS_SECRET_ARN: ${{ secrets.RDS_CREDENTIALS_SECRET_ARN }}
      #   run: |
      #     terraform destroy -auto-approve \
      #       -var="rds_credentials_secret_arn=$RDS_CREDENTIALS_SECRET_ARN"
      #   working-directory: terraform

      # - name: Terraform Plan
      #   run: terraform plan -var-file="terraform.tfvars" -auto-approve
      #   working-directory: terraform

      # - name: Terraform apply 
      #   run: terraform apply -var-file="terraform.tfvars" -auto-approve
      #   working-directory: terraform 

    #   - name: Terraform Destroy  
    #     run: terraform destroy -var-file="terraform.tfvars" -auto-approve
    #     working-directory: terraform



    build-and-test:
      runs-on: ubuntu-latest
      needs: terraform_infrastructure

      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List files
        run: ls -la

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: npm version
        run: npm --version

      - name: Install dependencies
        run: sudo npm install
        working-directory: ./my_application

      - name: Build the application
        run: sudo npm run build
        working-directory: ./my_application

      - name: List files before zip
        run: ls -la ./my_application

      - name: Zip application
        run: |
          cd my_application
          zip -r ../app.zip .

      - name: List files after zip
        run: ls -la

      - name: Upload to S3
        run: aws s3 cp app.zip s3://${{ secrets.APP_BUCKET_NAME }}/app.zip 
        working-directory: .



    deploy:
      runs-on: ubuntu-latest
      needs: build-and-test
  
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Elastic Beanstalk
        run: |
          VERSION_LABEL=$(date +%Y%m%d%H%M%S)
          aws elasticbeanstalk create-application-version \
            --application-name ${{ secrets.APPLICATION_NAME }} \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket=${{ secrets.APP_BUCKET_NAME }},S3Key=app.zip
  
          aws elasticbeanstalk update-environment \
            --application-name ${{ secrets.APPLICATION_NAME }} \
            --environment-name ${{ secrets.ENVIRONMENT_NAME }} \
            --version-label $VERSION_LABEL

      
  
    #   # - name: Deploy to Elastic Beanstalk (Example)  ##
    #   #   run: |
    #   #     eb init -p node.js your-application-name --region $AWS_DEFAULT_REGION
    #   #     eb create your-environment-name
    #   #     eb deploy your-environment-name
  
      - name: Notify success
        if: success()
        run: echo "Deployment successful!!"



    wait-for-deployment:
      runs-on: ubuntu-latest
      needs: deploy
  
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
  
        - name: Wait for Elastic Beanstalk environment to be ready
          run: |
            while true; do
              ENV_STATUS=$(aws elasticbeanstalk describe-environments --environment-names ${{ secrets.ENVIRONMENT_NAME }} --query "Environments[0].Status" --output text)
              if [ "$ENV_STATUS" == "Ready" ]; then
                echo "Environment is ready."
                break
              else
                echo "Environment status is $ENV_STATUS. Waiting..."
                sleep 30
              fi
            done


    swap-urls:
        runs-on: ubuntu-latest
        needs: wait-for-deployment

        steps:
          - name: Checkout code
            uses: actions/checkout@v3

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v2
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
              aws-region: us-east-1

          - name: Swap Elastic Beanstalk environment URLs
            run: |
              aws elasticbeanstalk swap-environment-cnames \
                --source-environment-name ${{ secrets.ENVIRONMENT_NAME }} \
                --destination-environment-name ${{ secrets.DESTINATION_ENVIRONMENT_NAME }}

          - name: Notify success
            if: success()
            run: echo "URL swap successful!!"
name: Deployment using Elastic Beanstalk
on:
    workflow_dispatch:
    push:
      branches: [ "stage" ]
    pull_request:
      branches: [ "main" ] 

env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
    AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} 
    AWS_DEFAULT_REGION: us-east-1

jobs:
    terraform_infrastructure:

      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: aws-action/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Echo Hello World
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Version
        run: echo "Terraform version=$(terraform --version)"

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -var "iam_instance_profile=your-iam-instance-profile" #
        working-directory: terraform

      - name: Terraform apply
        run: terraform apply -auto-approve -var "iam_instance_profile=your-iam-instance-profile"
        working-directory: terraform 

    #   - name: Terraform Destroy
    #     run: terraform destroy -auto-approve
    #     working-directory: terraform


    setup_env:
        runs-on: ubuntu-latest
        needs: terraform_infrastructure  
        steps:
          - name: Checkout
            uses: actions/checkout@v4
    
          - name: Checkout
            uses: actions/checkout@v4
    
          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
              aws-region: us-east-1

          - name: Create backend .env file
            run: |
                echo "APP_PORT=3000" > /home/ubuntu/Node_Project/backend/.env
                echo "" >> /home/ubuntu/Node_Project/backend/.env
                echo "### DB_HOST could be remote host, proxy or localhost URL but must be mysql" >> /home/ubuntu/Node_Project/backend/.env
                echo "DB_HOST=${{ secrets.DB_SERVER }}" >> /home/ubuntu/Node_Project/backend/.env
                echo "DB_PORT=${{ secrets.DB_PORT }}" >> /home/ubuntu/Node_Project/backend/.env
                echo "DB_NAME=${{ secrets.DB_NAME }}" >> /home/ubuntu/Node_Project/backend/.env
                echo "" >> /home/ubuntu/Node_Project/backend/.env
                echo "CRED=from_env" >> /home/ubuntu/Node_Project/backend/.env
                echo "" >> /home/ubuntu/Node_Project/backend/.env
                echo "### If you are Passing Credentials Directly from ENV" >> /home/ubuntu/Node_Project/backend/.env
                echo "DB_USER=${{ secrets.DB_USERNAME }}" >> /home/ubuntu/Node_Project/backend/.env
                echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /home/ubuntu/Node_Project/backend/.env

        #   - name: Upload app.zip to S3
        #     run: aws s3 cp path/to/app.zip s3://my-nodejs-app-eb-bucket/app.zip
        

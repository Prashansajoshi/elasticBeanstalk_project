name: Deployment using Elastic Beanstalk
on:
    workflow_dispatch:
    push:
      branches: [ "stage" ]
    pull_request:
      branches: [ "main" ] 

env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
    AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} 
    AWS_DEFAULT_REGION: us-east-1

jobs:
    terraform_infrastructure:

      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: aws-action/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Echo Hello World
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Version
        run: echo "Terraform version=$(terraform --version)"

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -var "iam_instance_profile=your-iam-instance-profile" #
        working-directory: terraform

      - name: Terraform apply
        run: terraform apply -auto-approve -var "iam_instance_profile=your-iam-instance-profile"
        working-directory: terraform 

    #   - name: Terraform Destroy
    #     run: terraform destroy -auto-approve
    #     working-directory: terraform

    upload_to_s3:
        runs-on: terraform_infrastructure
        steps:
        - uses: actions/checkout@v4

        - name: Build and zip application
          run: |
            cd my_application
            zip -r ../my_application.zip .

        - name: Upload to S3
          run: aws s3 cp ../my_application.zip s3://${{ secrets.APP_BUCKET_NAME }}/app.zip


    setup_env:
        runs-on: ubuntu-latest
        needs: upload_to_s3  
        steps:
          - name: Checkout
            uses: actions/checkout@v4
    
          - name: Checkout
            uses: actions/checkout@v4
    
          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
              aws-region: us-east-1

          # - name: Deploy to Elastic Beanstalk  
          #   run: |
          #     aws elasticbeanstalk create-application-version \
          #         --application-name my-nodejs-app \
          #         --version-label v1 \
          #         --source-bundle S3Bucket=my-nodejs-app-eb-bucket,S3Key=app.zip

          #     aws elasticbeanstalk update-environment \
          #         --application-name my-nodejs-app \
          #         --environment-name my-nodejs-env \
          #         --version-label v1 \
          #         --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=APP_PORT,Value=3000 \
          #         --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_HOST,Value=${{ secrets.DB_SERVER }} \
          #         --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_PORT,Value=${{ secrets.DB_PORT }} \
          #         --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_NAME,Value=${{ secrets.DATABASE_NAME }} \
          #         --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_USER,Value=${{ secrets.DB_USERNAME }} \
          #         --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_PASSWORD,Value=${{ secrets.DB_PASSWORD }}


          - name: Update Elastic Beanstalk Environment
            run: |
              aws elasticbeanstalk update-environment \
                --application-name ${{ secrets.APPLICATION_NAME }} \
                --environment-name ${{ secrets.ENVIRONMENT_NAME }} \
                --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=APP_PORT,Value=3000 \
                --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_HOST,Value=${{ secrets.DB_SERVER }} \
                --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_PORT,Value=${{ secrets.DB_PORT }} \
                --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_NAME,Value=${{ secrets.DATABASE_NAME }} \
                --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_USER,Value=${{ secrets.DB_USERNAME }} \
                --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_PASSWORD,Value=${{ secrets.DB_PASSWORD }}
  

          # - name: Create backend .env file
          #   run: |
          #       echo "APP_PORT=3000" > .env
          #       echo "" >> .env
          #       echo "### DB_HOST could be remote host, proxy or localhost URL but must be mysql" >> .env
          #       echo "DB_HOST=${{ secrets.DB_SERVER }}" >> .env
          #       echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          #       echo "DB_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          #       echo "" >> .env
          #       echo "CRED=from_env" >> .env
          #       echo "" >> .env
          #       echo "### If you are Passing Credentials Directly from ENV" >> .env
          #       echo "DB_USER=${{ secrets.DB_USERNAME }}" >> .env
          #       echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

        #   - name: Zip application files
        #     run: zip -r app.zip path/to/your/application

        #   - name: Upload app.zip to S3
        #     run: aws s3 cp app.zip s3://my-nodejs-app-eb-bucket/app.zip


    # install_dependencies:
    #     runs-on: ubuntu-latest
    #     needs: setup_env  
    #     steps:
    #       - name: Checkout
    #         uses: actions/checkout@v4
    
    #       - name: Checkout
    #         uses: actions/checkout@v4
    
    #       - name: Configure AWS Credentials
    #         uses: aws-actions/configure-aws-credentials@v4
    #         with:
    #             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #             aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
    #             aws-region: us-east-1

        #   - name: Creating frontend .env file
        #     run:
        #         dest: app.zip/frontend/.env
        #         content: |
        #             VITE_API_URL=http://54.236.46.163:3000

        #   - name: Ensure npm is installed
        #     apt:
        #         name: npm
        #         state: present
        #         update_cache: yes

        #   - name: Install pm2 globally
        #     npm:
        #         name: pm2
        #         global: yes
        #         state: present

        #   - name: Install frontend dependencies
        #     command: npm install
        #     args:
        #         chdir: /home/ubuntu/Node_Project/frontend

        #   - name: Install backend dependencies
        #     command: npm install
        #     args:
        #         chdir: /home/ubuntu/Node_Project/backend